"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const mixin_1 = require("./mixin");
const ContextsMixin = {
    getRawContexts() {
        const contexts = { NATIVE_APP: null, PROXY: null };
        const wvs = this.appModel.getWebviews() ?? [];
        for (let i = 1; i < wvs.length + 1; i++) {
            contexts[`WEBVIEW_${i}`] = wvs[i - 1];
        }
        return contexts;
    },
    assertWebviewContext() {
        if (this.curContext === 'NATIVE_APP') {
            throw new driver_1.errors.InvalidContextError();
        }
    },
    async getCurrentContext() {
        return this.curContext;
    },
    /**
     * Get the list of available contexts
     */
    async getContexts() {
        return lodash_1.default.keys(this.getRawContexts());
    },
    /**
     * Set the current context
     *
     * @param context - name of the context
     */
    async setContext(context) {
        const contexts = this.getRawContexts();
        if (context in contexts) {
            this.curContext = context;
            if (context === 'NATIVE_APP') {
                this.appModel.deactivateWebview();
                this._proxyActive = false;
            }
            else if (context === 'PROXY') {
                this._proxyActive = true;
            }
            else {
                this.appModel.activateWebview(contexts[context]);
                this._proxyActive = false;
            }
        }
        else {
            throw new driver_1.errors.NoSuchContextError();
        }
    },
    /**
     * Set the active frame
     */
    async setFrame(frameId) {
        this.assertWebviewContext();
        if (frameId === null) {
            this.appModel.deactivateFrame();
        }
        else {
            const nodes = this.appModel.xpathQuery(`//iframe[@id="${frameId}"]`);
            if (!lodash_1.default.isArray(nodes) || lodash_1.default.isEmpty(nodes)) {
                throw new driver_1.errors.NoSuchFrameError();
            }
            this.appModel.activateFrame(nodes[0]);
        }
    },
};
(0, mixin_1.mixin)(ContextsMixin);
//# sourceMappingURL=contexts.js.map