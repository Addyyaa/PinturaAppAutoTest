"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const mixin_1 = require("./mixin");
const ElementsMixin = {
    getElements(elementIds) {
        for (const elId of elementIds) {
            if (!lodash_1.default.has(this.elMap, elId)) {
                throw new driver_1.errors.StaleElementReferenceError();
            }
        }
        return elementIds.map((e) => this.elMap[e]);
    },
    getElement(elementId) {
        return this.getElements([elementId])[0];
    },
    async getName(elementId) {
        const el = this.getElement(elementId);
        return el.tagName;
    },
    async elementDisplayed(elementId) {
        const el = this.getElement(elementId);
        return el.isVisible();
    },
    async elementEnabled(elementId) {
        const el = this.getElement(elementId);
        return el.isEnabled();
    },
    async elementSelected(elementId) {
        const el = this.getElement(elementId);
        return el.isSelected();
    },
    async setValue(keys, elementId) {
        let value = keys;
        if (keys instanceof Array) {
            value = keys.join('');
        }
        const el = this.getElement(elementId);
        if (el.type !== 'MockInputField') {
            throw new driver_1.errors.InvalidElementStateError();
        }
        el.setAttr('value', value);
    },
    async getText(elementId) {
        const el = this.getElement(elementId);
        return el.getAttr('value');
    },
    async clear(elementId) {
        await this.setValue('', elementId);
    },
    /**
     * This comment should be displayed instead of the one from ExternalDriver
     */
    async click(elementId) {
        this.assertNoAlert();
        const el = this.getElement(elementId);
        if (!el.isVisible()) {
            throw new driver_1.errors.InvalidElementStateError();
        }
        el.click();
        this.focusedElId = elementId;
    },
    async getAttribute(attr, elementId) {
        const el = this.getElement(elementId);
        return el.getAttr(attr);
    },
    async getElementRect(elementId) {
        const el = this.getElement(elementId);
        return el.getElementRect();
    },
    async getSize(elementId) {
        const el = this.getElement(elementId);
        return el.getSize();
    },
    async equalsElement(elementIdA, elementIdB) {
        const el1 = this.getElement(elementIdA);
        const el2 = this.getElement(elementIdB);
        return el1.equals(el2);
    },
    async getCssProperty(prop, elementId) {
        this.assertWebviewContext();
        const el = this.getElement(elementId);
        return el.getCss(prop) ?? '';
    },
    async getLocation(elementId) {
        const el = this.getElement(elementId);
        return el.getLocation();
    },
    async getLocationInView(elementId) {
        return this.getLocation(elementId);
    },
};
(0, mixin_1.mixin)(ElementsMixin);
//# sourceMappingURL=element.js.map