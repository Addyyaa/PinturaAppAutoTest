export class FakeApp {
    dom: XMLDom.Document | null;
    activeDom: XMLDom.Document | null;
    activeWebview: any;
    activeFrame: any;
    activeAlert: FakeElement | null;
    lat: number;
    long: number;
    _width: number | null;
    _height: number | null;
    rawXml: string;
    /** @type {import('./driver').Orientation} */
    currentOrientation: import("./driver").Orientation;
    /** @type {import('@appium/types').ActionSequence[][]} */
    actionLog: import("@appium/types").ActionSequence[][];
    get title(): any;
    /**
     * @type {import('@appium/types').Location}
     */
    get currentGeoLocation(): import("@appium/types").Location;
    set orientation(o: import("@appium/types").Orientation);
    get orientation(): import("@appium/types").Orientation;
    /**
     * @type {number}
     */
    get width(): number;
    /**
     * @type {number}
     */
    get height(): number;
    setDims(): void;
    loadApp(appPath: any): Promise<void>;
    getWebviews(): FakeWebView[];
    activateWebview(wv: any): void;
    deactivateWebview(): void;
    activateFrame(frame: any): void;
    deactivateFrame(): void;
    xpathQuery(sel: any, ctx: any): xpath.SelectReturnType;
    idQuery(id: any, ctx: any): xpath.SelectReturnType;
    classQuery(className: any, ctx: any): xpath.SelectReturnType;
    cssQuery(css: any, ctx: any): xpath.SelectReturnType;
    hasAlert(): boolean;
    setAlertText(text: any): void;
    showAlert(alertId: any): void;
    alertText(): any;
    handleAlert(): void;
    getScreenshot(): string;
}
export type ElementWithData = Element & {
    data: any;
};
import XMLDom from '@xmldom/xmldom';
import { FakeElement } from './fake-element';
declare class FakeWebView {
    constructor(node: any);
    node: any;
}
import * as xpath from 'xpath';
export {};
//# sourceMappingURL=fake-app.d.ts.map