declare const FakeDriver_base: typeof BaseDriver;
declare const FakeDriver_base_1: typeof BaseDriver;
declare const FakeDriver_base_2: typeof BaseDriver;
declare const FakeDriver_base_3: typeof BaseDriver;
declare const FakeDriver_base_4: typeof BaseDriver;
/**
 * Constraints for {@linkcode FakeDriver}'s capabilites
 * @typedef {typeof FAKE_DRIVER_CONSTRAINTS} FakeDriverConstraints
 */
/**
 * @template [Thing=any]
 * @extends {BaseDriver<FakeDriverConstraints>}
 * @implements {ExternalDriver<FakeDriverConstraints>}
 */
export class FakeDriver<Thing = any> extends BaseDriver<{
    readonly app: {
        readonly presence: true;
        readonly isString: true;
    };
    readonly uniqueApp: {
        readonly isBoolean: true;
    };
    readonly runClock: {
        readonly isBoolean: true;
    };
}, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<{
    readonly app: {
        readonly presence: true;
        readonly isString: true;
    };
    readonly uniqueApp: {
        readonly isBoolean: true;
    };
    readonly runClock: {
        readonly isBoolean: true;
    };
}>, void, import("@appium/types").StringRecord>, FakeDriver_base, FakeDriver_base_1, FakeDriver_base_2, FakeDriver_base_3, FakeDriver_base_4 implements ExternalDriver<FakeDriverConstraints> {
    static newBidiCommands: {
        readonly 'appium:fake': {
            readonly getFakeThing: {
                readonly command: "getFakeThing";
            };
            readonly setFakeThing: {
                readonly command: "setFakeThing";
                readonly params: {
                    readonly required: readonly ["thing"];
                };
            };
            readonly doSomeMath: {
                readonly command: "doSomeMath";
                readonly params: {
                    readonly required: readonly ["num1", "num2"];
                };
            };
            readonly doSomeMath2: {
                readonly command: "doSomeMath2";
                readonly params: {
                    readonly required: readonly ["num1", "num2"];
                };
            };
        };
    };
    static newMethodMap: {
        readonly '/session/:sessionId/fakedriver': {
            readonly GET: {
                readonly command: "getFakeThing";
            };
            /**
             * Sets a fake thing
             */
            readonly POST: {
                readonly command: "setFakeThing";
                readonly payloadParams: {
                    readonly required: readonly ["thing"];
                };
            };
        };
        readonly '/session/:sessionId/fakedriverargs': {
            readonly GET: {
                readonly command: "getFakeDriverArgs";
            };
        };
        readonly '/session/:sessionId/deprecated': {
            readonly POST: {
                readonly command: "callDeprecatedCommand";
                readonly deprecated: true;
            };
        };
        readonly '/session/:sessionId/doubleclick': {
            readonly POST: {
                readonly command: "doubleClick";
            };
        };
    };
    static executeMethodMap: {
        readonly 'fake: addition': {
            readonly command: "fakeAddition";
            readonly params: {
                readonly required: readonly ["num1", "num2"];
                readonly optional: readonly ["num3"];
            };
        };
        /**
         * Gets a thing (a fake thing)
         */
        readonly 'fake: getThing': {
            readonly command: "getFakeThing";
        };
        readonly 'fake: setThing': {
            readonly command: "setFakeThing";
            readonly params: {
                readonly required: readonly ["thing"];
            };
        };
        readonly 'fake: getDeprecatedCommandsCalled': {
            readonly command: "getDeprecatedCommandsCalled";
        };
    };
    static fakeRoute(req: any, res: any): void;
    static updateServer(expressApp: any, httpServer: any, cliArgs: any): Promise<void>;
    constructor(opts?: import("@appium/types").InitialOpts, shouldValidateCaps?: boolean);
    /**
     * @type {FakeDriverConstraints}
     * @readonly
     */
    readonly desiredCapConstraints: FakeDriverConstraints;
    /** @type {string} */
    curContext: string;
    /** @type {FakeApp} */
    appModel: FakeApp;
    /** @type {boolean} */
    _proxyActive: boolean;
    /** @type {boolean} */
    shook: boolean;
    /** @type {string?} */
    focusedElId: string | null;
    /** @type {Thing?} */
    fakeThing: Thing | null;
    /** @type {number} */
    maxElId: number;
    /** @type {Record<string,import('./fake-element').FakeElement>} */
    elMap: Record<string, import("./fake-element").FakeElement>;
    /** @type {string|null} */
    _bidiProxyUrl: string | null;
    /** @type {boolean} */
    _clockRunning: boolean;
    proxyActive(): boolean;
    canProxy(): boolean;
    proxyReqRes(req: any, res: any): void;
    /**
     * @template [T=any]
     * @returns {Promise<T>}
     */
    proxyCommand<T = any>(): Promise<T>;
    /**
     * @param {string} [sessionId]
     * @returns {Promise<void>}
     */
    deleteSession(sessionId?: string): Promise<void>;
    /**
     * @returns {Promise<string>}
     */
    getWindowHandle(): Promise<string>;
    /**
     * @returns {Promise<string[]>}
     */
    getWindowHandles(): Promise<string[]>;
    get driverData(): {
        isUnique: boolean;
    };
    getFakeThing(): Promise<Thing | null>;
    startClock(): Promise<void>;
    stopClock(): void;
    /**
     * Set the 'thing' value (so that it can be retrieved later)
     *
     * @param {Thing} thing
     * @returns {Promise<null>}
     */
    setFakeThing(thing: Thing): Promise<null>;
    /**
     * Get the driver args that were sent in via the CLI
     *
     * @returns {Promise<typeof this.cliArgs>}
     */
    getFakeDriverArgs(): Promise<typeof this.cliArgs>;
    /**
     * This is a command that will return a list of deprecated command names called
     *
     * @returns {Promise<string[]>}
     */
    getDeprecatedCommandsCalled(): Promise<string[]>;
    /**
     * This is a command that exists just to be an example of a deprecated command
     *
     * @returns {Promise<void>}
     */
    callDeprecatedCommand(): Promise<void>;
    /**
     * @param {number} num1
     * @param {number} num2
     */
    doSomeMath(num1: number, num2: number): Promise<number>;
    /**
     * @param {number} num1
     * @param {number} num2
     */
    doSomeMath2(num1: number, num2: number): Promise<number>;
}
export default FakeDriver;
/**
 * Constraints for {@linkcode FakeDriver}'s capabilites
 */
export type FakeDriverConstraints = typeof FAKE_DRIVER_CONSTRAINTS;
export type FakeDriverCaps = import("./types").FakeDriverCaps;
export type W3CFakeDriverCaps = import("./types").W3CFakeDriverCaps;
export type Element = import("@appium/types").Element;
export type DriverClass<D extends import("@appium/types").Driver> = import("@appium/types").DriverClass<D>;
export type ExternalDriver<C extends import("@appium/types").Constraints> = import("@appium/types").ExternalDriver<C>;
export type Orientation = import("@appium/types").Orientation;
import { BaseDriver } from 'appium/driver';
import { FakeApp } from './fake-app';
declare namespace FAKE_DRIVER_CONSTRAINTS {
    namespace app {
        let presence: true;
        let isString: true;
    }
    namespace uniqueApp {
        let isBoolean: true;
    }
    namespace runClock {
        let isBoolean_1: true;
        export { isBoolean_1 as isBoolean };
    }
}
//# sourceMappingURL=driver.d.ts.map